// Generated tools namespace for CodeMode execution
// This file is auto-generated by CodeMode - do not edit manually

export interface McpTools {
  /**
   * A simple greeting tool
   * Server: Example MCP Server
   */
  greet_example_server(input: GreetExampleServerInput): Promise<ToolResult>;

  /**
   * A tool that sends different greetings with delays between them
   * Server: Example MCP Server
   */
  multi_greet_example_server(input: MultiGreetExampleServerInput): Promise<ToolResult>;

  /**
   * A tool that collects user information through elicitation
   * Server: Example MCP Server
   */
  collect_user_info_example_server(input: CollectUserInfoExampleServerInput): Promise<ToolResult>;

  /**
   * Starts sending periodic notifications for testing resumability
   * Server: Example MCP Server
   */
  start_notification_stream_example_server(input: StartNotificationStreamExampleServerInput): Promise<ToolResult>;

  /**
   * Returns a list of files as ResourceLinks without embedding their content
   * Server: Example MCP Server
   */
  list_files_example_server(input: ListFilesExampleServerInput): Promise<ToolResult>;
}

// Tool metadata for runtime resolution
export const TOOL_METADATA = {
  "greet_example_server": {
    originalName: "greet",
    serverId: "example-server",
    serverName: "Example MCP Server",
  },
  "multi_greet_example_server": {
    originalName: "multi-greet",
    serverId: "example-server",
    serverName: "Example MCP Server",
  },
  "collect_user_info_example_server": {
    originalName: "collect-user-info",
    serverId: "example-server",
    serverName: "Example MCP Server",
  },
  "start_notification_stream_example_server": {
    originalName: "start-notification-stream",
    serverId: "example-server",
    serverName: "Example MCP Server",
  },
  "list_files_example_server": {
    originalName: "list-files",
    serverId: "example-server",
    serverName: "Example MCP Server",
  }
} as const;

// Export for runtime use
export type ToolName = keyof McpTools;
